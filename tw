-- 彩虹拖尾客户端核心逻辑（已去除角色重生自动触发，仅手动控制）
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local TweenService = game:GetService("TweenService")

-- 初始化变量
local player = Players.LocalPlayer
local isTrailActive = false  -- 拖尾开关状态（默认关闭）
local trailParts = {}         -- 存储拖尾部件实例
local trailConnection = nil   -- 渲染循环连接
local colorIndex = 0          -- 彩虹颜色索引
local character = player.Character  -- 当前角色实例（仅初始赋值，不自动更新）

-- 彩虹颜色数组
local rainbowColors = {
    Color3.fromRGB(255, 0, 0),
    Color3.fromRGB(255, 127, 0),
    Color3.fromRGB(255, 255, 0),
    Color3.fromRGB(0, 255, 0),
    Color3.fromRGB(0, 0, 255),
    Color3.fromRGB(75, 0, 130),
    Color3.fromRGB(148, 0, 211)
}

-- 1. 创建拖尾部件（优化：降低粒子基础大小，避免初始就偏大）
local function createTrailPart(position, color, scale)
    local part = Instance.new("Part")
    part.Name = "RainbowTrail_" .. player.Name
    part.Size = Vector3.new(2, 2, 2) * scale  -- 随角色缩放（受上限限制）
    part.Material = Enum.Material.Neon
    part.Color = color
    part.Anchored = true
    part.CanCollide = false
    part.Shape = Enum.PartType.Ball
    part.Position = position
    part.Parent = workspace

    -- 发光效果（光照范围随缩放）
    local pointLight = Instance.new("PointLight")
    pointLight.Color = color
    pointLight.Brightness = 2
    pointLight.Range = 10 * scale
    pointLight.Parent = part

    -- 粒子效果（核心：基础大小0.3，避免过大）
    local attachment = Instance.new("Attachment")
    attachment.Parent = part
    local particles = Instance.new("ParticleEmitter")
    particles.Parent = attachment
    particles.Color = ColorSequence.new(color)
    particles.Size = NumberSequence.new{
        NumberSequenceKeypoint.new(0, 0.3 * scale), 
        NumberSequenceKeypoint.new(1, 0)
    }
    particles.Lifetime = NumberRange.new(0.5, 3)
    particles.Rate = 40 * scale
    particles.SpreadAngle = Vector2.new(45, 45)
    particles.Speed = NumberRange.new(4 * scale, 8 * scale)
    particles.EmissionDirection = Enum.NormalId.Top

    return part
end

-- 2. 清理拖尾（彻底销毁，避免残留）
local function clearTrail()
    for _, part in ipairs(trailParts) do
        if part then part:Destroy() end
    end
    trailParts = {}
end

-- 3. 开始拖尾（核心：限制粒子最大大小，仅手动触发时执行）
local function startTrail()
    -- 若已有拖尾循环或无角色，直接返回（避免重复开启）
    if trailConnection or not character then return end
    
    -- 等待角色根部件加载（仅手动开启时验证）
    local humanoidRootPart = character:FindFirstChild("HumanoidRootPart")
    if not humanoidRootPart then
        warn("角色无根部件，无法开启彩虹拖尾")
        return
    end
    
    local lastPosition = humanoidRootPart.Position
    trailConnection = RunService.RenderStepped:Connect(function()
        -- 若角色失效或拖尾关闭，停止循环
        if not character or not character:FindFirstChild("HumanoidRootPart") or not isTrailActive then
            stopTrail()
            return
        end

        -- 计算角色缩放（保留原限制逻辑）
        local currentRootPart = character.HumanoidRootPart
        local baseRootSize = 2
        local rawCharScale = currentRootPart.Size.X / baseRootSize
        rawCharScale = rawCharScale < 0.1 and 1 or rawCharScale
        local maxScale = 5  -- 粒子最大放大倍数
        local charScale = math.min(rawCharScale, maxScale)

        -- 移动阈值适配（避免静止生成拖尾）
        local currentPosition = currentRootPart.Position
        local distance = (currentPosition - lastPosition).Magnitude
        local moveThreshold = 0.5 * charScale

        -- 移动时生成拖尾（保留原逻辑）
        if distance >= moveThreshold then
            colorIndex = (colorIndex % #rainbowColors) + 1
            local trailPart = createTrailPart(lastPosition, rainbowColors[colorIndex], charScale)
            table.insert(trailParts, trailPart)

            -- 拖尾消失动画
            local tween = TweenService:Create(trailPart, TweenInfo.new(2, Enum.EasingStyle.Quad), {
                Transparency = 1,
                Size = Vector3.new(0.1, 0.1, 0.1) * charScale
            })
            tween:Play()
            tween.Completed:Connect(function()
                if trailPart then trailPart:Destroy() end
                for i, p in ipairs(trailParts) do
                    if p == trailPart then
                        table.remove(trailParts, i)
                        break
                    end
                end
            end)

            lastPosition = currentPosition
        end
    end)

    -- 加入清理列表（确保UI销毁时停止）
    if getgenv().cleanupList and getgenv().cleanupList.connections then
        table.insert(getgenv().cleanupList.connections, trailConnection)
    end
end

-- 4. 停止拖尾（快速清理，适配缩放上限）
local function stopTrail()
    -- 断开渲染循环连接
    if trailConnection and trailConnection.Connected then
        trailConnection:Disconnect()
        trailConnection = nil
    end

    -- 清理现有拖尾（保留原缩放适配逻辑）
    local currentRootPart = character and character:FindFirstChild("HumanoidRootPart")
    local rawCharScale = currentRootPart and (currentRootPart.Size.X / 2) or 1
    rawCharScale = rawCharScale < 0.1 and 1 or rawCharScale
    local maxScale = 3
    local charScale = math.min(rawCharScale, maxScale)

    for _, part in ipairs(trailParts) do
        if part and part.Parent then
            TweenService:Create(part, TweenInfo.new(0.5), {
                Transparency = 1,
                Size = Vector3.new(0.1, 0.1, 0.1) * charScale
            }):Play()
            task.delay(0.5, function() if part then part:Destroy() end end)
        end
    end
    trailParts = {}
end

-- 5. 初始化：仅切换初始状态（去除角色自动绑定）
isTrailActive = not isTrailActive  -- 初始切换（默认从false→true，可手动改为false）
if isTrailActive and character then  -- 仅初始有角色且开启时执行
    startTrail()
    print("[彩虹拖尾] 已开启，粒子最大放大3倍（可调整maxScale）！")
else
    stopTrail()
    print("[彩虹拖尾] 已关闭")
end

-- 暴露全局停止函数（方便手动关闭，保留原功能）
getgenv().stopRainbowTrail = stopTrail
