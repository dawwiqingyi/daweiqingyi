-- 彩虹拖尾客户端核心逻辑（修复粒子随角色变大功能）
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local TweenService = game:GetService("TweenService")

-- 初始化变量
local player = Players.LocalPlayer
local isTrailActive = false
local trailParts = {}
local trailConnection = nil
local colorIndex = 0
local character -- 存储当前角色实例

-- 彩虹颜色数组
local rainbowColors = {
    Color3.fromRGB(255, 0, 0),
    Color3.fromRGB(255, 127, 0),
    Color3.fromRGB(255, 255, 0),
    Color3.fromRGB(0, 255, 0),
    Color3.fromRGB(0, 0, 255),
    Color3.fromRGB(75, 0, 130),
    Color3.fromRGB(148, 0, 211)
}

-- 1. 创建拖尾部件（接收scale参数，适配角色大小）
local function createTrailPart(position, color, scale)
    local part = Instance.new("Part")
    part.Name = "RainbowTrail_" .. player.Name
    part.Size = Vector3.new(2, 2, 2) * scale -- 拖尾球体随角色缩放
    part.Material = Enum.Material.Neon
    part.Color = color
    part.Anchored = true
    part.CanCollide = false
    part.Shape = Enum.PartType.Ball
    part.Position = position
    part.Parent = workspace

    -- 发光效果（光照范围随角色缩放）
    local pointLight = Instance.new("PointLight")
    pointLight.Color = color
    pointLight.Brightness = 2
    pointLight.Range = 10 * scale
    pointLight.Parent = part

    -- 粒子效果（核心：所有粒子属性乘缩放）
    local attachment = Instance.new("Attachment")
    attachment.Parent = part
    local particles = Instance.new("ParticleEmitter")
    particles.Parent = attachment
    particles.Color = ColorSequence.new(color)
    -- 粒子大小：起始大小×缩放，保持衰减趋势
    particles.Size = NumberSequence.new{
        NumberSequenceKeypoint.new(0, 0.5 * scale),
        NumberSequenceKeypoint.new(1, 0)
    }
    particles.Lifetime = NumberRange.new(0.5, 1.0)
    particles.Rate = 50 * scale -- 大角色需要更多粒子
    particles.SpreadAngle = Vector2.new(45, 45)
    particles.Speed = NumberRange.new(5 * scale, 10 * scale) -- 速度随角色缩放
    particles.EmissionDirection = Enum.NormalId.Top -- 可选：固定发射方向，避免混乱

    return part
end

-- 2. 清理拖尾
local function clearTrail()
    for _, part in ipairs(trailParts) do
        if part and part.Parent then
            part:Destroy() -- 直接销毁，比设Parent=nil更彻底
        end
    end
    trailParts = {}
end

-- 3. 开始拖尾（核心修复：基于HumanoidRootPart.Size计算缩放）
local function startTrail()
    if trailConnection then return end
    character = player.Character or player.CharacterAdded:Wait()
    local humanoidRootPart = character:WaitForChild("HumanoidRootPart")
    local lastPosition = humanoidRootPart.Position

    -- 每帧更新，实时同步角色缩放
    trailConnection = RunService.RenderStepped:Connect(function()
        if not character or not character:FindFirstChild("HumanoidRootPart") then
            stopTrail()
            return
        end

        -- 关键修复：从HumanoidRootPart.Size获取缩放（适配99%的角色缩放场景）
        local currentRootPart = character.HumanoidRootPart
        local baseRootSize = 2 -- 角色初始HumanoidRootPart.Size.X（默认值，若角色初始不同可修改）
        local charScale = currentRootPart.Size.X / baseRootSize -- 计算实际缩放比例
        charScale = charScale < 0.1 and 1 or charScale -- 避免缩放为0导致错误

        -- 计算移动距离，阈值随缩放适配
        local currentPosition = currentRootPart.Position
        local distance = (currentPosition - lastPosition).Magnitude
        local moveThreshold = 0.5 * charScale -- 大角色需要更大移动距离才生成拖尾

        if distance >= moveThreshold then
            colorIndex = (colorIndex % #rainbowColors) + 1
            local trailPart = createTrailPart(lastPosition, rainbowColors[colorIndex], charScale)
            table.insert(trailParts, trailPart)

            -- 消失动画，目标大小随缩放
            local tween = TweenService:Create(trailPart, TweenInfo.new(2, Enum.EasingStyle.Quad), {
                Transparency = 1,
                Size = Vector3.new(0.1, 0.1, 0.1) * charScale
            })
            tween:Play()
            tween.Completed:Connect(function()
                if trailPart then trailPart:Destroy() end
                -- 从列表移除
                for i, p in ipairs(trailParts) do
                    if p == trailPart then
                        table.remove(trailParts, i)
                        break
                    end
                end
            end)

            lastPosition = currentPosition
        end
    end)

    -- 加入清理列表
    if getgenv().cleanupList and getgenv().cleanupList.connections then
        table.insert(getgenv().cleanupList.connections, trailConnection)
    end
end

-- 4. 停止拖尾
local function stopTrail()
    if trailConnection and trailConnection.Connected then
        trailConnection:Disconnect()
        trailConnection = nil
    end
    -- 快速清理现有拖尾
    local currentRootPart = character and character:FindFirstChild("HumanoidRootPart")
    local charScale = currentRootPart and (currentRootPart.Size.X / 2) or 1
    charScale = charScale < 0.1 and 1 or charScale

    for _, part in ipairs(trailParts) do
        if part and part.Parent then
            TweenService:Create(part, TweenInfo.new(0.5), {
                Transparency = 1,
                Size = Vector3.new(0.1, 0.1, 0.1) * charScale
            }):Play()
            task.delay(0.5, function() if part then part:Destroy() end end)
        end
    end
    trailParts = {}
end

-- 5. 角色重生时恢复拖尾
local function onCharacterAdded(newCharacter)
    character = newCharacter
    if isTrailActive then
        newCharacter:WaitForChild("HumanoidRootPart")
        task.wait(1) -- 等待角色加载完成
        startTrail()
    end
end

-- 6. 初始化切换状态
isTrailActive = not isTrailActive
if isTrailActive then
    startTrail()
    print("[彩虹拖尾] 已开启，调整角色大小后移动可见粒子变化！")
else
    stopTrail()
    print("[彩虹拖尾] 已关闭")
end

-- 绑定重生事件
if player.Character then
    onCharacterAdded(player.Character)
end
player.CharacterAdded:Connect(onCharacterAdded)

-- 暴露全局停止函数
getgenv().stopRainbowTrail = stopTrail
