local Players = game:GetService("Players")
local AnimationService = game:GetService("AnimationService")
local UserInputService = game:GetService("UserInputService")

local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoid = character:WaitForChild("Humanoid")

-- 创建动画
local animation = Instance.new("Animation")
animation.AnimationId = "rbxassetid://0"
animation.Name = "RightArmWavingAnimation"

-- 获取右手骨骼
local rightArm = character:WaitForChild("RightArm")

-- 定义动画关键帧数据
local keyframes = {
    -- 第0秒，右手初始位置
    {Time = 0, Value = rightArm.CFrame},
    -- 第0.5秒，右手抬高
    {Time = 0.5, Value = rightArm.CFrame * CFrame.Angles(0, 0, -math.pi / 4)},
    -- 第1秒，右手向一侧摆动
    {Time = 1, Value = rightArm.CFrame * CFrame.Angles(0, math.pi / 8, -math.pi / 4)},
    -- 第1.5秒，右手向另一侧摆动
    {Time = 1.5, Value = rightArm.CFrame * CFrame.Angles(0, -math.pi / 8, -math.pi / 4)},
    -- 第2秒，右手回到抬高位置
    {Time = 2, Value = rightArm.CFrame * CFrame.Angles(0, 0, -math.pi / 4)},
    -- 第2.5秒，右手回到初始位置
    {Time = 2.5, Value = rightArm.CFrame}
}

-- 将关键帧数据添加到动画轨道
local animationTrack = animation:CreateTrack()
for _, keyframe in ipairs(keyframes) do
    local key = animationTrack:Insert(keyframe.Time, keyframe.Value)
    key.Interpolation = Enum.AnimationKeyInterpolation.Linear
end

-- 定义一个函数来播放动画
local function playRightArmAnimation()
    local track = humanoid:LoadAnimation(animation)
    track:Play()
end

-- 处理输入
local inputConnection
if UserInputService.TouchEnabled then
    inputConnection = UserInputService.TouchTap:Connect(playRightArmAnimation)
else
    inputConnection = UserInputService.InputBegan:Connect(function(input)
        if input.KeyCode == Enum.KeyCode.Y then
            playRightArmAnimation()
        end
    end)
end

-- 清理连接（如果需要在脚本结束时清理）
local function cleanup()
    if inputConnection then
        inputConnection:Disconnect()
    end
end

-- 如果有合适的清理时机（例如脚本被移除时），调用cleanup函数
-- 这里假设在脚本所在的实例被移除时调用
local script = script or script.Parent
script.Parent = nil
cleanup()
